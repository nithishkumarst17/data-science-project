import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(42)
num_products = 2000
products = [f"Product_{i+1}" for i in range(num_products)]

data = []
for product in products:
    ad_spend_flag = np.random.choice(['Yes', 'No'], p=[0.7, 0.3])
    monthly_sales = np.random.randint(1000, 5000, 6)
    if ad_spend_flag == 'Yes':
        improvement_factor = np.random.uniform(1.05, 1.3)
        sales_after_ad = int(monthly_sales[-1] * improvement_factor)
    else:
        improvement_factor = 1
        sales_after_ad = monthly_sales[-1]
    sales_before_ad = monthly_sales[-1]
    data.append([
        product,
        *monthly_sales,
        1 if ad_spend_flag == 'Yes' else 0,
        sales_before_ad,
        sales_after_ad
    ])

df = pd.DataFrame(data, columns=[
    'Product', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6',
    'Advertisement', 'Sales_Before_Ad', 'Sales_After_Ad'
])

X = df[['M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'Advertisement']]
y = df['Sales_After_Ad']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

def predict_sales(last_6_months, ad_flag):
    input_data = np.array(last_6_months + [1 if ad_flag == 'Yes' else 0]).reshape(1, -1)
    prediction = model.predict(input_data)[0]
    return round(prediction, 2)

sample_sales = [1200, 2500, 2700, 3000, 3500, 4000]
print("Predicted Sales After Ad:", predict_sales(sample_sales, 'Yes'))
print("Predicted Sales Without Ad:", predict_sales(sample_sales, 'No'))
